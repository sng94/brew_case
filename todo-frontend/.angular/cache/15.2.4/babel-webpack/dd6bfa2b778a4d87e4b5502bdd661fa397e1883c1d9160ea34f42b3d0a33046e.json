{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Todo } from './todo';\nlet TodoListComponent = class TodoListComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.todos = [];\n    this.newTodo = new Todo();\n    this.editing = false;\n    this.editingTodo = new Todo();\n  }\n  ngOnInit() {\n    this.getTodos();\n  }\n  getTodos() {\n    this.todoService.getTodos().subscribe(todos => this.todos = todos);\n  }\n  createTodo(todoForm) {\n    this.todoService.createTodo(this.newTodo).subscribe(createTodo => {\n      todoForm.reset();\n      this.newTodo = new Todo();\n      this.todos.unshift(createTodo);\n    });\n  }\n  deleteTodo(id) {\n    this.todoService.deleteTodo(id).subscribe(() => {\n      this.todos = this.todos.filter(todo => todo.id != id);\n    });\n  }\n  updateTodo(todoData) {\n    console.log(todoData);\n    this.todoService.updateTodo(todoData).subscribe(updatedTodo => {\n      let existingTodo = this.todos.find(todo => todo.id === updatedTodo.id) || {};\n      Object.assign(existingTodo, updatedTodo);\n      this.clearEditing();\n    });\n  }\n  toggleCompleted(todoData) {\n    todoData.completed = !todoData.completed;\n    this.todoService.updateTodo(todoData).subscribe(updatedTodo => {\n      let existingTodo = this.todos.find(todo => todo.id === updatedTodo.id) || {};\n      Object.assign(existingTodo, updatedTodo);\n    });\n  }\n  editTodo(todoData) {\n    this.editing = true;\n    Object.assign(this.editingTodo, todoData);\n  }\n  clearEditing() {\n    this.editingTodo = new Todo();\n    this.editing = false;\n  }\n};\nTodoListComponent = __decorate([Component({\n  selector: 'todo-list',\n  templateUrl: './todo-list.component.html'\n})], TodoListComponent);\nexport { TodoListComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,IAAI,QAAQ,QAAQ;AAQtB,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAM5BC,YACUC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IANrB,UAAK,GAAW,EAAE;IAClB,YAAO,GAAS,IAAIH,IAAI,EAAE;IAC1B,YAAO,GAAY,KAAK;IACxB,gBAAW,GAAS,IAAIA,IAAI,EAAE;EAI3B;EAEHI,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,IAAI,CAACF,WAAW,CAACE,QAAQ,EAAE,CACxBC,SAAS,CAACC,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAE;EAC5C;EAEAC,UAAU,CAACC,QAAgB;IACzB,IAAI,CAACN,WAAW,CAACK,UAAU,CAAC,IAAI,CAACE,OAAO,CAAC,CACtCJ,SAAS,CAACE,UAAU,IAAG;MACtBC,QAAQ,CAACE,KAAK,EAAE;MAChB,IAAI,CAACD,OAAO,GAAG,IAAIV,IAAI,EAAE;MACzB,IAAI,CAACO,KAAK,CAACK,OAAO,CAACJ,UAAU,CAAC;IAChC,CAAC,CAAC;EACN;EAEAK,UAAU,CAACC,EAAU;IACnB,IAAI,CAACX,WAAW,CAACU,UAAU,CAACC,EAAE,CAAC,CAC9BR,SAAS,CAAC,MAAK;MACd,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACQ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,EAAE,IAAIA,EAAE,CAAC;IACvD,CAAC,CAAC;EACJ;EAEAG,UAAU,CAACC,QAAc;IACvBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACrB,IAAI,CAACf,WAAW,CAACc,UAAU,CAACC,QAAQ,CAAC,CAClCZ,SAAS,CAACe,WAAW,IAAG;MACvB,IAAIC,YAAY,GAAkB,IAAI,CAACf,KAAK,CAACgB,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKO,WAAW,CAACP,EAAE,CAAC,IAAI,EAAE;MAC3FU,MAAM,CAACC,MAAM,CAACH,YAAY,EAAED,WAAW,CAAC;MACxC,IAAI,CAACK,YAAY,EAAE;IACrB,CAAC,CAAC;EACN;EAEFC,eAAe,CAACT,QAAc;IAC5BA,QAAQ,CAACU,SAAS,GAAG,CAACV,QAAQ,CAACU,SAAS;IACxC,IAAI,CAACzB,WAAW,CAACc,UAAU,CAACC,QAAQ,CAAC,CAClCZ,SAAS,CAACe,WAAW,IAAG;MACvB,IAAIC,YAAY,GAAkB,IAAI,CAACf,KAAK,CAACgB,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACF,EAAE,KAAKO,WAAW,CAACP,EAAE,CAAC,IAAI,EAAE;MAC3FU,MAAM,CAACC,MAAM,CAACH,YAAY,EAAED,WAAW,CAAC;IAC1C,CAAC,CAAC;EACN;EAEEQ,QAAQ,CAACX,QAAc;IACrB,IAAI,CAACY,OAAO,GAAG,IAAI;IACnBN,MAAM,CAACC,MAAM,CAAC,IAAI,CAACM,WAAW,EAAEb,QAAQ,CAAC;EAC3C;EAEAQ,YAAY;IACV,IAAI,CAACK,WAAW,GAAG,IAAI/B,IAAI,EAAE;IAC7B,IAAI,CAAC8B,OAAO,GAAG,KAAK;EACtB;CACD;AA/DY7B,iBAAiB,eAL7BF,SAAS,CAAC;EACTiC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE;CACd,CAAC,GAEWhC,iBAAiB,CA+D7B;SA/DYA,iBAAiB","names":["Component","Todo","TodoListComponent","constructor","todoService","ngOnInit","getTodos","subscribe","todos","createTodo","todoForm","newTodo","reset","unshift","deleteTodo","id","filter","todo","updateTodo","todoData","console","log","updatedTodo","existingTodo","find","Object","assign","clearEditing","toggleCompleted","completed","editTodo","editing","editingTodo","selector","templateUrl"],"sourceRoot":"","sources":["/Users/nehir/Projects/TodoApp/todo-frontend/src/app/todo-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TodoService } from './todo.service';\nimport { Todo } from './todo';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'todo-list',\n  templateUrl: './todo-list.component.html'\n})\n\nexport class TodoListComponent implements OnInit {\n  todos: Todo[] = [];\n  newTodo: Todo = new Todo();\n  editing: boolean = false;\n  editingTodo: Todo = new Todo();\n\n  constructor(\n    private todoService: TodoService,\n  ) {}\n\n  ngOnInit(): void {\n    this.getTodos();\n  }\n\n  getTodos(): void {\n    this.todoService.getTodos()\n      .subscribe(todos => this.todos = todos );    \n  }\n\n  createTodo(todoForm: NgForm): void {\n    this.todoService.createTodo(this.newTodo)\n      .subscribe(createTodo => {        \n        todoForm.reset();\n        this.newTodo = new Todo();\n        this.todos.unshift(createTodo)\n      });\n  }\n\n  deleteTodo(id: string): void {\n    this.todoService.deleteTodo(id)\n    .subscribe(() => {\n      this.todos = this.todos.filter(todo => todo.id != id);\n    });\n  }\n\n  updateTodo(todoData: Todo): void {\n    console.log(todoData);\n    this.todoService.updateTodo(todoData)\n      .subscribe(updatedTodo => {\n        let existingTodo: Partial<Todo> = this.todos.find(todo => todo.id === updatedTodo.id) || {};\n        Object.assign(existingTodo, updatedTodo);\n        this.clearEditing();\n      });\n  }\n\ntoggleCompleted(todoData: Todo): void {\n  todoData.completed = !todoData.completed;\n  this.todoService.updateTodo(todoData)\n    .subscribe(updatedTodo => {\n      let existingTodo: Partial<Todo> = this.todos.find(todo => todo.id === updatedTodo.id) || {};\n      Object.assign(existingTodo, updatedTodo);\n    });\n}\n\n  editTodo(todoData: Todo): void {\n    this.editing = true;\n    Object.assign(this.editingTodo, todoData);\n  }\n\n  clearEditing(): void {\n    this.editingTodo = new Todo();\n    this.editing = false;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}