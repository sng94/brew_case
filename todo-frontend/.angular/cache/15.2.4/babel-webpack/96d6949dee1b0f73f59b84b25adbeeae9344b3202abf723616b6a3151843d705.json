{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080';\n  }\n  getTodos() {\n    return this.http.get(this.baseUrl + '/api/todos').pipe(catchError(this.handleError));\n  }\n  createTodo(todoData) {\n    return this.http.post(this.baseUrl + '/api/todos', todoData).pipe(catchError(this.handleError));\n  }\n  updateTodo(todoData) {\n    return this.http.put(this.baseUrl + '/api/todos/' + todoData.id, todoData).pipe(catchError(this.handleError));\n  }\n  deleteTodo(id) {\n    return this.http.delete(this.baseUrl + '/api/todos/' + id).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nTodoService.ɵfac = function TodoService_Factory(t) {\n  return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n};\nTodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoService,\n  factory: TodoService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAG3C,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,YAAO,GAAG,uBAAuB;EACD;EAExCC,QAAQ;IACN,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,OAAO,GAAG,YAAY,CAAC,CACtDC,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAC,UAAU,CAACC,QAAc;IACvB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,IAAI,CAACL,OAAO,GAAG,YAAY,EAAEI,QAAQ,CAAC,CAC/DH,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAI,UAAU,CAACF,QAAc;IACvB,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAO,IAAI,CAACP,OAAO,GAAG,aAAa,GAAGI,QAAQ,CAACI,EAAE,EAAEJ,QAAQ,CAAC,CAC7EH,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAO,UAAU,CAACD,EAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACa,MAAM,CAAC,IAAI,CAACV,OAAO,GAAG,aAAa,GAAGQ,EAAE,CAAC,CACvDP,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACS,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOlB,UAAU,CACf,iDAAiD,CAAC;EACtD;;AA7CWE,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;AAAA","names":["throwError","catchError","TodoService","constructor","http","getTodos","get","baseUrl","pipe","handleError","createTodo","todoData","post","updateTodo","put","id","deleteTodo","delete","error","status","console","factory"],"sourceRoot":"","sources":["/Users/nehir/Projects/TodoApp/todo-frontend/src/app/todo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Todo } from './todo';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class TodoService {\n  private baseUrl = 'http://localhost:8080';\n  constructor(private http: HttpClient) { }\n\n  getTodos(): Observable<Todo[]> {\n    return this.http.get<Todo[]>(this.baseUrl + '/api/todos')\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  createTodo(todoData: Todo): Observable<Todo> {\n    return this.http.post<Todo>(this.baseUrl + '/api/todos', todoData)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  updateTodo(todoData: Todo): Observable<Todo> {\n    return this.http.put<Todo>(this.baseUrl + '/api/todos/' + todoData.id, todoData)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  deleteTodo(id: string): Observable<any> {\n    return this.http.delete(this.baseUrl + '/api/todos/' + id)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}